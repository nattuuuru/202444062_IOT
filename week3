확장성 : 독립적인 데이터들을 쌓아놓고 사용

InfluxDB : 시간에 따라 변화하는 데이터를 효과적으로 저장하고 관리하는데 최적화된 데이터베이스

ㄴ 주요 특징 :  1. 시계열 데이터 저장
	       	2. 고속 데이터 삽입 및 검색
		3. SQL과 비슷한 질의 언어 지원
		4. 태그 기반 데이터 저장

한 단계 상위로 가기 : cd..

미세먼지 센서
led를 쏘고 수신부에서 수신이 안 된 만큼 미세먼지 측정
미세먼지 얼마나 있는지를 전압으로 표현, 아날로그 데이터로 표현

===============================================================
int Vo = A0;
int V_LED = 2;

float Vo_value = 0; 
float Voltage = 0;
float dustDensity = 0;

void setup() {
  Serial.begin(9600);
  pinMode(V_LED, OUTPUT);
  pinMode(Vo, INPUT);
}

void loop() {
  digitalWrite(V_LED, LOW);
  delayMicroseconds(280);
  Vo_value = analogRead(Vo);
  delayMicroseconds(40);
  digitalWrite(V_LED, HIGH);
  delayMicroseconds(9680);

  Voltage = Vo_value*5.0 / 1023.0; 
  dustDensity = (Voltage - 0.5) / 0.005;

  Serial.print("dust =");
  Serial.println(dustDensity);

  delay(1000);
}

==================================================================
from influxdb_client import InfluxDBClient
import time
import serial

influxdb_url = "https://localhost:8086"  # 기본 url
influxdb_token = "Zx6iaJA18ZhqjYjqNXmPT5q56cDsJc9X7BtYqsbH9AmjiBjXrtgWEB4PY2Sbg-i6IG5_Akwxz8v1iHHlgcjoVA=="
influxdb_org = "test"  # influxDB에서 설정한 조직 이름
influx_bucket = "dust"  # 데이터가 저장 될 버킷 이름

# === (1) Arduino 시리얼 포트 설정 ===
serial_port = "COM4"  # 아두이노 포트(Window기준)
baudrate = 9600       # 시리얼 통신 속도
timeout = 2           # 타임아웃 (초)

# influxDB 2.0 클라이언트 생성, 설정
client = InfluxDBClient(url=influxdb_url, token=influxdb_token, org=influxdb_org)
write_api = client.write_api()

# === (4) 시리얼 포트 열기 ===
try:
    ser = serial.Serial(serial_port, baudrate, timeout=timeout)
    print(f"Connected to {serial_port} at {baudrate} baud")
except serial.SerialException:
    print("Failed to connect to serial port.")
    exit()

# === (5) 시리얼 데이터 읽기 및 InfluxDB 저장 ===
try:
    while True:
        if ser.in_waiting > 0:
            line = ser.readline().decode('utf-8').strip()  # 시리얼 데이터 읽기
            print(f"Received: {line}")

            # 데이터가 "temperature=25.3" 같은 형식이라고 가정
            if "=" in line:
                key, value = line.split("=")
                try:
                    value = float(value)  # 숫자로 변환
                    # influxDB 2.x 포맷
                    data = f"sensor_sara,device=arduino {key}={value}"
                    write_api.write(bucket=influx_bucket, record=data)
                    print(f"Data written to influxDB: {key} = {value}")

                except ValueError:
                    print("Invalid data format")

        time.sleep(1)  # 1초 대기
except KeyboardInterrupt:
    print("Stopping data collection...")

finally:
    ser.close()
